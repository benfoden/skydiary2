// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// To update the DB, run:
// bun prisma migrate dev --name <name_here>
// bun prisma generate
// bun prisma migrate deploy <name_here>
// turso db shell skydiary < ./prisma/migrations/20240514025841_addcols/migration.sql

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "sqlite"
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url = "file:./tmp/dev.db"
}

model Post {
    id        String   @id @default(cuid())
    title     String? 
    content   String // @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tags      Tag[] @relation("PostTags")
    comments  Comment[]
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    sentimentScore String?
    summary   String?

    @@index([title])
}

model Tag {
    id          String   @id @default(cuid())
    content     String
    isSentiment Boolean  @default(false)
    createdAt   DateTime @default(now())
    post        Post[]   @relation("PostTags")
    user        User[]   @relation("UserTags")
    @@index([content])
}

model Comment {
    id        String   @id @default(cuid())
    content   String // @db.Text
    isAI      Boolean  @default(true)
    coachVariant String? // @db.Text
    coachName String? // @db.Text
    createdAt DateTime @default(now())
    postId    String
    post      Post     @relation(fields: [postId], references: [id])
}

model Recap {
    id        String   @id @default(cuid())
    startDate DateTime
    endDate   DateTime
    content   String   // @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy User     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([startDate, endDate])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    isDarkMode    Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    tags          Tag[]   @relation("UserTags")
    recaps        Recap[]  
    isAdmin       Boolean   @default(false)
    isSpecial     Boolean   @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
